// Code generated by counterfeiter. DO NOT EDIT.
package clusterfakes

import (
	"context"
	"sync"

	"github.com/philborlin/committed/internal/cluster"
)

type FakeIngestable struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	IngestStub        func(context.Context, cluster.Position, chan<- *cluster.Proposal, chan<- cluster.Position) error
	ingestMutex       sync.RWMutex
	ingestArgsForCall []struct {
		arg1 context.Context
		arg2 cluster.Position
		arg3 chan<- *cluster.Proposal
		arg4 chan<- cluster.Position
	}
	ingestReturns struct {
		result1 error
	}
	ingestReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIngestable) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIngestable) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeIngestable) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeIngestable) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIngestable) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIngestable) Ingest(arg1 context.Context, arg2 cluster.Position, arg3 chan<- *cluster.Proposal, arg4 chan<- cluster.Position) error {
	fake.ingestMutex.Lock()
	ret, specificReturn := fake.ingestReturnsOnCall[len(fake.ingestArgsForCall)]
	fake.ingestArgsForCall = append(fake.ingestArgsForCall, struct {
		arg1 context.Context
		arg2 cluster.Position
		arg3 chan<- *cluster.Proposal
		arg4 chan<- cluster.Position
	}{arg1, arg2, arg3, arg4})
	stub := fake.IngestStub
	fakeReturns := fake.ingestReturns
	fake.recordInvocation("Ingest", []interface{}{arg1, arg2, arg3, arg4})
	fake.ingestMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIngestable) IngestCallCount() int {
	fake.ingestMutex.RLock()
	defer fake.ingestMutex.RUnlock()
	return len(fake.ingestArgsForCall)
}

func (fake *FakeIngestable) IngestCalls(stub func(context.Context, cluster.Position, chan<- *cluster.Proposal, chan<- cluster.Position) error) {
	fake.ingestMutex.Lock()
	defer fake.ingestMutex.Unlock()
	fake.IngestStub = stub
}

func (fake *FakeIngestable) IngestArgsForCall(i int) (context.Context, cluster.Position, chan<- *cluster.Proposal, chan<- cluster.Position) {
	fake.ingestMutex.RLock()
	defer fake.ingestMutex.RUnlock()
	argsForCall := fake.ingestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIngestable) IngestReturns(result1 error) {
	fake.ingestMutex.Lock()
	defer fake.ingestMutex.Unlock()
	fake.IngestStub = nil
	fake.ingestReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIngestable) IngestReturnsOnCall(i int, result1 error) {
	fake.ingestMutex.Lock()
	defer fake.ingestMutex.Unlock()
	fake.IngestStub = nil
	if fake.ingestReturnsOnCall == nil {
		fake.ingestReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ingestReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIngestable) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.ingestMutex.RLock()
	defer fake.ingestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIngestable) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cluster.Ingestable = new(FakeIngestable)
