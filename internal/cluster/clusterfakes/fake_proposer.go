// Code generated by counterfeiter. DO NOT EDIT.
package clusterfakes

import (
	"sync"

	"github.com/philborlin/committed/internal/cluster"
)

type FakeProposer struct {
	ProposeStub        func(*cluster.LogProposal) error
	proposeMutex       sync.RWMutex
	proposeArgsForCall []struct {
		arg1 *cluster.LogProposal
	}
	proposeReturns struct {
		result1 error
	}
	proposeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProposer) Propose(arg1 *cluster.LogProposal) error {
	fake.proposeMutex.Lock()
	ret, specificReturn := fake.proposeReturnsOnCall[len(fake.proposeArgsForCall)]
	fake.proposeArgsForCall = append(fake.proposeArgsForCall, struct {
		arg1 *cluster.LogProposal
	}{arg1})
	stub := fake.ProposeStub
	fakeReturns := fake.proposeReturns
	fake.recordInvocation("Propose", []interface{}{arg1})
	fake.proposeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProposer) ProposeCallCount() int {
	fake.proposeMutex.RLock()
	defer fake.proposeMutex.RUnlock()
	return len(fake.proposeArgsForCall)
}

func (fake *FakeProposer) ProposeCalls(stub func(*cluster.LogProposal) error) {
	fake.proposeMutex.Lock()
	defer fake.proposeMutex.Unlock()
	fake.ProposeStub = stub
}

func (fake *FakeProposer) ProposeArgsForCall(i int) *cluster.LogProposal {
	fake.proposeMutex.RLock()
	defer fake.proposeMutex.RUnlock()
	argsForCall := fake.proposeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeProposer) ProposeReturns(result1 error) {
	fake.proposeMutex.Lock()
	defer fake.proposeMutex.Unlock()
	fake.ProposeStub = nil
	fake.proposeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProposer) ProposeReturnsOnCall(i int, result1 error) {
	fake.proposeMutex.Lock()
	defer fake.proposeMutex.Unlock()
	fake.ProposeStub = nil
	if fake.proposeReturnsOnCall == nil {
		fake.proposeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.proposeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProposer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.proposeMutex.RLock()
	defer fake.proposeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProposer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cluster.Proposer = new(FakeProposer)
