// Code generated by counterfeiter. DO NOT EDIT.
package syncablefakes

import (
	"context"
	"sync"

	"github.com/philborlin/committed/internal/node/syncable"
	"github.com/philborlin/committed/internal/node/types"
)

type FakeSyncable struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	InitStub        func(context.Context) error
	initMutex       sync.RWMutex
	initArgsForCall []struct {
		arg1 context.Context
	}
	initReturns struct {
		result1 error
	}
	initReturnsOnCall map[int]struct {
		result1 error
	}
	SyncStub        func(context.Context, *types.AcceptedProposal) error
	syncMutex       sync.RWMutex
	syncArgsForCall []struct {
		arg1 context.Context
		arg2 *types.AcceptedProposal
	}
	syncReturns struct {
		result1 error
	}
	syncReturnsOnCall map[int]struct {
		result1 error
	}
	TopicsStub        func() []string
	topicsMutex       sync.RWMutex
	topicsArgsForCall []struct {
	}
	topicsReturns struct {
		result1 []string
	}
	topicsReturnsOnCall map[int]struct {
		result1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSyncable) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.closeReturns
	return fakeReturns.result1
}

func (fake *FakeSyncable) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeSyncable) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeSyncable) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSyncable) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSyncable) Init(arg1 context.Context) error {
	fake.initMutex.Lock()
	ret, specificReturn := fake.initReturnsOnCall[len(fake.initArgsForCall)]
	fake.initArgsForCall = append(fake.initArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("Init", []interface{}{arg1})
	fake.initMutex.Unlock()
	if fake.InitStub != nil {
		return fake.InitStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.initReturns
	return fakeReturns.result1
}

func (fake *FakeSyncable) InitCallCount() int {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	return len(fake.initArgsForCall)
}

func (fake *FakeSyncable) InitCalls(stub func(context.Context) error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = stub
}

func (fake *FakeSyncable) InitArgsForCall(i int) context.Context {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	argsForCall := fake.initArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSyncable) InitReturns(result1 error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = nil
	fake.initReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSyncable) InitReturnsOnCall(i int, result1 error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = nil
	if fake.initReturnsOnCall == nil {
		fake.initReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.initReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSyncable) Sync(arg1 context.Context, arg2 *types.AcceptedProposal) error {
	fake.syncMutex.Lock()
	ret, specificReturn := fake.syncReturnsOnCall[len(fake.syncArgsForCall)]
	fake.syncArgsForCall = append(fake.syncArgsForCall, struct {
		arg1 context.Context
		arg2 *types.AcceptedProposal
	}{arg1, arg2})
	fake.recordInvocation("Sync", []interface{}{arg1, arg2})
	fake.syncMutex.Unlock()
	if fake.SyncStub != nil {
		return fake.SyncStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.syncReturns
	return fakeReturns.result1
}

func (fake *FakeSyncable) SyncCallCount() int {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return len(fake.syncArgsForCall)
}

func (fake *FakeSyncable) SyncCalls(stub func(context.Context, *types.AcceptedProposal) error) {
	fake.syncMutex.Lock()
	defer fake.syncMutex.Unlock()
	fake.SyncStub = stub
}

func (fake *FakeSyncable) SyncArgsForCall(i int) (context.Context, *types.AcceptedProposal) {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	argsForCall := fake.syncArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSyncable) SyncReturns(result1 error) {
	fake.syncMutex.Lock()
	defer fake.syncMutex.Unlock()
	fake.SyncStub = nil
	fake.syncReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSyncable) SyncReturnsOnCall(i int, result1 error) {
	fake.syncMutex.Lock()
	defer fake.syncMutex.Unlock()
	fake.SyncStub = nil
	if fake.syncReturnsOnCall == nil {
		fake.syncReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.syncReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSyncable) Topics() []string {
	fake.topicsMutex.Lock()
	ret, specificReturn := fake.topicsReturnsOnCall[len(fake.topicsArgsForCall)]
	fake.topicsArgsForCall = append(fake.topicsArgsForCall, struct {
	}{})
	fake.recordInvocation("Topics", []interface{}{})
	fake.topicsMutex.Unlock()
	if fake.TopicsStub != nil {
		return fake.TopicsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.topicsReturns
	return fakeReturns.result1
}

func (fake *FakeSyncable) TopicsCallCount() int {
	fake.topicsMutex.RLock()
	defer fake.topicsMutex.RUnlock()
	return len(fake.topicsArgsForCall)
}

func (fake *FakeSyncable) TopicsCalls(stub func() []string) {
	fake.topicsMutex.Lock()
	defer fake.topicsMutex.Unlock()
	fake.TopicsStub = stub
}

func (fake *FakeSyncable) TopicsReturns(result1 []string) {
	fake.topicsMutex.Lock()
	defer fake.topicsMutex.Unlock()
	fake.TopicsStub = nil
	fake.topicsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeSyncable) TopicsReturnsOnCall(i int, result1 []string) {
	fake.topicsMutex.Lock()
	defer fake.topicsMutex.Unlock()
	fake.TopicsStub = nil
	if fake.topicsReturnsOnCall == nil {
		fake.topicsReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.topicsReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeSyncable) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	fake.topicsMutex.RLock()
	defer fake.topicsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSyncable) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ syncable.Syncable = new(FakeSyncable)
