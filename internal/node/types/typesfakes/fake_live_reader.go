// Code generated by counterfeiter. DO NOT EDIT.
package typesfakes

import (
	"sync"

	"github.com/philborlin/committed/internal/node/types"
)

type FakeLiveReader struct {
	ErrStub        func() error
	errMutex       sync.RWMutex
	errArgsForCall []struct {
	}
	errReturns struct {
		result1 error
	}
	errReturnsOnCall map[int]struct {
		result1 error
	}
	NextStub        func() bool
	nextMutex       sync.RWMutex
	nextArgsForCall []struct {
	}
	nextReturns struct {
		result1 bool
	}
	nextReturnsOnCall map[int]struct {
		result1 bool
	}
	RecordStub        func() []byte
	recordMutex       sync.RWMutex
	recordArgsForCall []struct {
	}
	recordReturns struct {
		result1 []byte
	}
	recordReturnsOnCall map[int]struct {
		result1 []byte
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLiveReader) Err() error {
	fake.errMutex.Lock()
	ret, specificReturn := fake.errReturnsOnCall[len(fake.errArgsForCall)]
	fake.errArgsForCall = append(fake.errArgsForCall, struct {
	}{})
	fake.recordInvocation("Err", []interface{}{})
	fake.errMutex.Unlock()
	if fake.ErrStub != nil {
		return fake.ErrStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.errReturns
	return fakeReturns.result1
}

func (fake *FakeLiveReader) ErrCallCount() int {
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	return len(fake.errArgsForCall)
}

func (fake *FakeLiveReader) ErrCalls(stub func() error) {
	fake.errMutex.Lock()
	defer fake.errMutex.Unlock()
	fake.ErrStub = stub
}

func (fake *FakeLiveReader) ErrReturns(result1 error) {
	fake.errMutex.Lock()
	defer fake.errMutex.Unlock()
	fake.ErrStub = nil
	fake.errReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLiveReader) ErrReturnsOnCall(i int, result1 error) {
	fake.errMutex.Lock()
	defer fake.errMutex.Unlock()
	fake.ErrStub = nil
	if fake.errReturnsOnCall == nil {
		fake.errReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.errReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLiveReader) Next() bool {
	fake.nextMutex.Lock()
	ret, specificReturn := fake.nextReturnsOnCall[len(fake.nextArgsForCall)]
	fake.nextArgsForCall = append(fake.nextArgsForCall, struct {
	}{})
	fake.recordInvocation("Next", []interface{}{})
	fake.nextMutex.Unlock()
	if fake.NextStub != nil {
		return fake.NextStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nextReturns
	return fakeReturns.result1
}

func (fake *FakeLiveReader) NextCallCount() int {
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	return len(fake.nextArgsForCall)
}

func (fake *FakeLiveReader) NextCalls(stub func() bool) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = stub
}

func (fake *FakeLiveReader) NextReturns(result1 bool) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = nil
	fake.nextReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeLiveReader) NextReturnsOnCall(i int, result1 bool) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = nil
	if fake.nextReturnsOnCall == nil {
		fake.nextReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.nextReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeLiveReader) Record() []byte {
	fake.recordMutex.Lock()
	ret, specificReturn := fake.recordReturnsOnCall[len(fake.recordArgsForCall)]
	fake.recordArgsForCall = append(fake.recordArgsForCall, struct {
	}{})
	fake.recordInvocation("Record", []interface{}{})
	fake.recordMutex.Unlock()
	if fake.RecordStub != nil {
		return fake.RecordStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.recordReturns
	return fakeReturns.result1
}

func (fake *FakeLiveReader) RecordCallCount() int {
	fake.recordMutex.RLock()
	defer fake.recordMutex.RUnlock()
	return len(fake.recordArgsForCall)
}

func (fake *FakeLiveReader) RecordCalls(stub func() []byte) {
	fake.recordMutex.Lock()
	defer fake.recordMutex.Unlock()
	fake.RecordStub = stub
}

func (fake *FakeLiveReader) RecordReturns(result1 []byte) {
	fake.recordMutex.Lock()
	defer fake.recordMutex.Unlock()
	fake.RecordStub = nil
	fake.recordReturns = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeLiveReader) RecordReturnsOnCall(i int, result1 []byte) {
	fake.recordMutex.Lock()
	defer fake.recordMutex.Unlock()
	fake.RecordStub = nil
	if fake.recordReturnsOnCall == nil {
		fake.recordReturnsOnCall = make(map[int]struct {
			result1 []byte
		})
	}
	fake.recordReturnsOnCall[i] = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeLiveReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	fake.recordMutex.RLock()
	defer fake.recordMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLiveReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.LiveReader = new(FakeLiveReader)
