// Code generated by counterfeiter. DO NOT EDIT.
package typesfakes

import (
	"sync"

	"github.com/philborlin/committed/types"
)

type FakeWAL struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	LogStub        func(...[]byte) error
	logMutex       sync.RWMutex
	logArgsForCall []struct {
		arg1 [][]byte
	}
	logReturns struct {
		result1 error
	}
	logReturnsOnCall map[int]struct {
		result1 error
	}
	NextSegmentStub        func() error
	nextSegmentMutex       sync.RWMutex
	nextSegmentArgsForCall []struct {
	}
	nextSegmentReturns struct {
		result1 error
	}
	nextSegmentReturnsOnCall map[int]struct {
		result1 error
	}
	SegmentsStub        func() (int, int, error)
	segmentsMutex       sync.RWMutex
	segmentsArgsForCall []struct {
	}
	segmentsReturns struct {
		result1 int
		result2 int
		result3 error
	}
	segmentsReturnsOnCall map[int]struct {
		result1 int
		result2 int
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWAL) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.closeReturns
	return fakeReturns.result1
}

func (fake *FakeWAL) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeWAL) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeWAL) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWAL) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWAL) Log(arg1 ...[]byte) error {
	fake.logMutex.Lock()
	ret, specificReturn := fake.logReturnsOnCall[len(fake.logArgsForCall)]
	fake.logArgsForCall = append(fake.logArgsForCall, struct {
		arg1 [][]byte
	}{arg1})
	fake.recordInvocation("Log", []interface{}{arg1})
	fake.logMutex.Unlock()
	if fake.LogStub != nil {
		return fake.LogStub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.logReturns
	return fakeReturns.result1
}

func (fake *FakeWAL) LogCallCount() int {
	fake.logMutex.RLock()
	defer fake.logMutex.RUnlock()
	return len(fake.logArgsForCall)
}

func (fake *FakeWAL) LogCalls(stub func(...[]byte) error) {
	fake.logMutex.Lock()
	defer fake.logMutex.Unlock()
	fake.LogStub = stub
}

func (fake *FakeWAL) LogArgsForCall(i int) [][]byte {
	fake.logMutex.RLock()
	defer fake.logMutex.RUnlock()
	argsForCall := fake.logArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWAL) LogReturns(result1 error) {
	fake.logMutex.Lock()
	defer fake.logMutex.Unlock()
	fake.LogStub = nil
	fake.logReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWAL) LogReturnsOnCall(i int, result1 error) {
	fake.logMutex.Lock()
	defer fake.logMutex.Unlock()
	fake.LogStub = nil
	if fake.logReturnsOnCall == nil {
		fake.logReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.logReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWAL) NextSegment() error {
	fake.nextSegmentMutex.Lock()
	ret, specificReturn := fake.nextSegmentReturnsOnCall[len(fake.nextSegmentArgsForCall)]
	fake.nextSegmentArgsForCall = append(fake.nextSegmentArgsForCall, struct {
	}{})
	fake.recordInvocation("NextSegment", []interface{}{})
	fake.nextSegmentMutex.Unlock()
	if fake.NextSegmentStub != nil {
		return fake.NextSegmentStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nextSegmentReturns
	return fakeReturns.result1
}

func (fake *FakeWAL) NextSegmentCallCount() int {
	fake.nextSegmentMutex.RLock()
	defer fake.nextSegmentMutex.RUnlock()
	return len(fake.nextSegmentArgsForCall)
}

func (fake *FakeWAL) NextSegmentCalls(stub func() error) {
	fake.nextSegmentMutex.Lock()
	defer fake.nextSegmentMutex.Unlock()
	fake.NextSegmentStub = stub
}

func (fake *FakeWAL) NextSegmentReturns(result1 error) {
	fake.nextSegmentMutex.Lock()
	defer fake.nextSegmentMutex.Unlock()
	fake.NextSegmentStub = nil
	fake.nextSegmentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWAL) NextSegmentReturnsOnCall(i int, result1 error) {
	fake.nextSegmentMutex.Lock()
	defer fake.nextSegmentMutex.Unlock()
	fake.NextSegmentStub = nil
	if fake.nextSegmentReturnsOnCall == nil {
		fake.nextSegmentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.nextSegmentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWAL) Segments() (int, int, error) {
	fake.segmentsMutex.Lock()
	ret, specificReturn := fake.segmentsReturnsOnCall[len(fake.segmentsArgsForCall)]
	fake.segmentsArgsForCall = append(fake.segmentsArgsForCall, struct {
	}{})
	fake.recordInvocation("Segments", []interface{}{})
	fake.segmentsMutex.Unlock()
	if fake.SegmentsStub != nil {
		return fake.SegmentsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.segmentsReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeWAL) SegmentsCallCount() int {
	fake.segmentsMutex.RLock()
	defer fake.segmentsMutex.RUnlock()
	return len(fake.segmentsArgsForCall)
}

func (fake *FakeWAL) SegmentsCalls(stub func() (int, int, error)) {
	fake.segmentsMutex.Lock()
	defer fake.segmentsMutex.Unlock()
	fake.SegmentsStub = stub
}

func (fake *FakeWAL) SegmentsReturns(result1 int, result2 int, result3 error) {
	fake.segmentsMutex.Lock()
	defer fake.segmentsMutex.Unlock()
	fake.SegmentsStub = nil
	fake.segmentsReturns = struct {
		result1 int
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeWAL) SegmentsReturnsOnCall(i int, result1 int, result2 int, result3 error) {
	fake.segmentsMutex.Lock()
	defer fake.segmentsMutex.Unlock()
	fake.SegmentsStub = nil
	if fake.segmentsReturnsOnCall == nil {
		fake.segmentsReturnsOnCall = make(map[int]struct {
			result1 int
			result2 int
			result3 error
		})
	}
	fake.segmentsReturnsOnCall[i] = struct {
		result1 int
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeWAL) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.logMutex.RLock()
	defer fake.logMutex.RUnlock()
	fake.nextSegmentMutex.RLock()
	defer fake.nextSegmentMutex.RUnlock()
	fake.segmentsMutex.RLock()
	defer fake.segmentsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWAL) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.WAL = new(FakeWAL)
