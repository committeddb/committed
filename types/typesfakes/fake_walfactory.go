// Code generated by counterfeiter. DO NOT EDIT.
package typesfakes

import (
	"io"
	"sync"

	"github.com/go-kit/kit/log"
	"github.com/philborlin/committed/types"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/tsdb/wal"
)

type FakeWALFactory struct {
	NewStub        func(log.Logger, prometheus.Registerer, string, bool) (types.WAL, error)
	newMutex       sync.RWMutex
	newArgsForCall []struct {
		arg1 log.Logger
		arg2 prometheus.Registerer
		arg3 string
		arg4 bool
	}
	newReturns struct {
		result1 types.WAL
		result2 error
	}
	newReturnsOnCall map[int]struct {
		result1 types.WAL
		result2 error
	}
	NewLiveReaderStub        func(log.Logger, prometheus.Registerer, io.Reader) types.LiveReader
	newLiveReaderMutex       sync.RWMutex
	newLiveReaderArgsForCall []struct {
		arg1 log.Logger
		arg2 prometheus.Registerer
		arg3 io.Reader
	}
	newLiveReaderReturns struct {
		result1 types.LiveReader
	}
	newLiveReaderReturnsOnCall map[int]struct {
		result1 types.LiveReader
	}
	NewSegmentsRangeReaderStub        func(...wal.SegmentRange) (io.ReadCloser, error)
	newSegmentsRangeReaderMutex       sync.RWMutex
	newSegmentsRangeReaderArgsForCall []struct {
		arg1 []wal.SegmentRange
	}
	newSegmentsRangeReaderReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	newSegmentsRangeReaderReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	NewSizeStub        func(log.Logger, prometheus.Registerer, string, int, bool) (types.WAL, error)
	newSizeMutex       sync.RWMutex
	newSizeArgsForCall []struct {
		arg1 log.Logger
		arg2 prometheus.Registerer
		arg3 string
		arg4 int
		arg5 bool
	}
	newSizeReturns struct {
		result1 types.WAL
		result2 error
	}
	newSizeReturnsOnCall map[int]struct {
		result1 types.WAL
		result2 error
	}
	OpenStub        func(log.Logger, prometheus.Registerer, string) (types.WAL, error)
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		arg1 log.Logger
		arg2 prometheus.Registerer
		arg3 string
	}
	openReturns struct {
		result1 types.WAL
		result2 error
	}
	openReturnsOnCall map[int]struct {
		result1 types.WAL
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWALFactory) New(arg1 log.Logger, arg2 prometheus.Registerer, arg3 string, arg4 bool) (types.WAL, error) {
	fake.newMutex.Lock()
	ret, specificReturn := fake.newReturnsOnCall[len(fake.newArgsForCall)]
	fake.newArgsForCall = append(fake.newArgsForCall, struct {
		arg1 log.Logger
		arg2 prometheus.Registerer
		arg3 string
		arg4 bool
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("New", []interface{}{arg1, arg2, arg3, arg4})
	fake.newMutex.Unlock()
	if fake.NewStub != nil {
		return fake.NewStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.newReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWALFactory) NewCallCount() int {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	return len(fake.newArgsForCall)
}

func (fake *FakeWALFactory) NewCalls(stub func(log.Logger, prometheus.Registerer, string, bool) (types.WAL, error)) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = stub
}

func (fake *FakeWALFactory) NewArgsForCall(i int) (log.Logger, prometheus.Registerer, string, bool) {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	argsForCall := fake.newArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeWALFactory) NewReturns(result1 types.WAL, result2 error) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = nil
	fake.newReturns = struct {
		result1 types.WAL
		result2 error
	}{result1, result2}
}

func (fake *FakeWALFactory) NewReturnsOnCall(i int, result1 types.WAL, result2 error) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = nil
	if fake.newReturnsOnCall == nil {
		fake.newReturnsOnCall = make(map[int]struct {
			result1 types.WAL
			result2 error
		})
	}
	fake.newReturnsOnCall[i] = struct {
		result1 types.WAL
		result2 error
	}{result1, result2}
}

func (fake *FakeWALFactory) NewLiveReader(arg1 log.Logger, arg2 prometheus.Registerer, arg3 io.Reader) types.LiveReader {
	fake.newLiveReaderMutex.Lock()
	ret, specificReturn := fake.newLiveReaderReturnsOnCall[len(fake.newLiveReaderArgsForCall)]
	fake.newLiveReaderArgsForCall = append(fake.newLiveReaderArgsForCall, struct {
		arg1 log.Logger
		arg2 prometheus.Registerer
		arg3 io.Reader
	}{arg1, arg2, arg3})
	fake.recordInvocation("NewLiveReader", []interface{}{arg1, arg2, arg3})
	fake.newLiveReaderMutex.Unlock()
	if fake.NewLiveReaderStub != nil {
		return fake.NewLiveReaderStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newLiveReaderReturns
	return fakeReturns.result1
}

func (fake *FakeWALFactory) NewLiveReaderCallCount() int {
	fake.newLiveReaderMutex.RLock()
	defer fake.newLiveReaderMutex.RUnlock()
	return len(fake.newLiveReaderArgsForCall)
}

func (fake *FakeWALFactory) NewLiveReaderCalls(stub func(log.Logger, prometheus.Registerer, io.Reader) types.LiveReader) {
	fake.newLiveReaderMutex.Lock()
	defer fake.newLiveReaderMutex.Unlock()
	fake.NewLiveReaderStub = stub
}

func (fake *FakeWALFactory) NewLiveReaderArgsForCall(i int) (log.Logger, prometheus.Registerer, io.Reader) {
	fake.newLiveReaderMutex.RLock()
	defer fake.newLiveReaderMutex.RUnlock()
	argsForCall := fake.newLiveReaderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeWALFactory) NewLiveReaderReturns(result1 types.LiveReader) {
	fake.newLiveReaderMutex.Lock()
	defer fake.newLiveReaderMutex.Unlock()
	fake.NewLiveReaderStub = nil
	fake.newLiveReaderReturns = struct {
		result1 types.LiveReader
	}{result1}
}

func (fake *FakeWALFactory) NewLiveReaderReturnsOnCall(i int, result1 types.LiveReader) {
	fake.newLiveReaderMutex.Lock()
	defer fake.newLiveReaderMutex.Unlock()
	fake.NewLiveReaderStub = nil
	if fake.newLiveReaderReturnsOnCall == nil {
		fake.newLiveReaderReturnsOnCall = make(map[int]struct {
			result1 types.LiveReader
		})
	}
	fake.newLiveReaderReturnsOnCall[i] = struct {
		result1 types.LiveReader
	}{result1}
}

func (fake *FakeWALFactory) NewSegmentsRangeReader(arg1 ...wal.SegmentRange) (io.ReadCloser, error) {
	fake.newSegmentsRangeReaderMutex.Lock()
	ret, specificReturn := fake.newSegmentsRangeReaderReturnsOnCall[len(fake.newSegmentsRangeReaderArgsForCall)]
	fake.newSegmentsRangeReaderArgsForCall = append(fake.newSegmentsRangeReaderArgsForCall, struct {
		arg1 []wal.SegmentRange
	}{arg1})
	fake.recordInvocation("NewSegmentsRangeReader", []interface{}{arg1})
	fake.newSegmentsRangeReaderMutex.Unlock()
	if fake.NewSegmentsRangeReaderStub != nil {
		return fake.NewSegmentsRangeReaderStub(arg1...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.newSegmentsRangeReaderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWALFactory) NewSegmentsRangeReaderCallCount() int {
	fake.newSegmentsRangeReaderMutex.RLock()
	defer fake.newSegmentsRangeReaderMutex.RUnlock()
	return len(fake.newSegmentsRangeReaderArgsForCall)
}

func (fake *FakeWALFactory) NewSegmentsRangeReaderCalls(stub func(...wal.SegmentRange) (io.ReadCloser, error)) {
	fake.newSegmentsRangeReaderMutex.Lock()
	defer fake.newSegmentsRangeReaderMutex.Unlock()
	fake.NewSegmentsRangeReaderStub = stub
}

func (fake *FakeWALFactory) NewSegmentsRangeReaderArgsForCall(i int) []wal.SegmentRange {
	fake.newSegmentsRangeReaderMutex.RLock()
	defer fake.newSegmentsRangeReaderMutex.RUnlock()
	argsForCall := fake.newSegmentsRangeReaderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWALFactory) NewSegmentsRangeReaderReturns(result1 io.ReadCloser, result2 error) {
	fake.newSegmentsRangeReaderMutex.Lock()
	defer fake.newSegmentsRangeReaderMutex.Unlock()
	fake.NewSegmentsRangeReaderStub = nil
	fake.newSegmentsRangeReaderReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeWALFactory) NewSegmentsRangeReaderReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.newSegmentsRangeReaderMutex.Lock()
	defer fake.newSegmentsRangeReaderMutex.Unlock()
	fake.NewSegmentsRangeReaderStub = nil
	if fake.newSegmentsRangeReaderReturnsOnCall == nil {
		fake.newSegmentsRangeReaderReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.newSegmentsRangeReaderReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeWALFactory) NewSize(arg1 log.Logger, arg2 prometheus.Registerer, arg3 string, arg4 int, arg5 bool) (types.WAL, error) {
	fake.newSizeMutex.Lock()
	ret, specificReturn := fake.newSizeReturnsOnCall[len(fake.newSizeArgsForCall)]
	fake.newSizeArgsForCall = append(fake.newSizeArgsForCall, struct {
		arg1 log.Logger
		arg2 prometheus.Registerer
		arg3 string
		arg4 int
		arg5 bool
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("NewSize", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.newSizeMutex.Unlock()
	if fake.NewSizeStub != nil {
		return fake.NewSizeStub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.newSizeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWALFactory) NewSizeCallCount() int {
	fake.newSizeMutex.RLock()
	defer fake.newSizeMutex.RUnlock()
	return len(fake.newSizeArgsForCall)
}

func (fake *FakeWALFactory) NewSizeCalls(stub func(log.Logger, prometheus.Registerer, string, int, bool) (types.WAL, error)) {
	fake.newSizeMutex.Lock()
	defer fake.newSizeMutex.Unlock()
	fake.NewSizeStub = stub
}

func (fake *FakeWALFactory) NewSizeArgsForCall(i int) (log.Logger, prometheus.Registerer, string, int, bool) {
	fake.newSizeMutex.RLock()
	defer fake.newSizeMutex.RUnlock()
	argsForCall := fake.newSizeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeWALFactory) NewSizeReturns(result1 types.WAL, result2 error) {
	fake.newSizeMutex.Lock()
	defer fake.newSizeMutex.Unlock()
	fake.NewSizeStub = nil
	fake.newSizeReturns = struct {
		result1 types.WAL
		result2 error
	}{result1, result2}
}

func (fake *FakeWALFactory) NewSizeReturnsOnCall(i int, result1 types.WAL, result2 error) {
	fake.newSizeMutex.Lock()
	defer fake.newSizeMutex.Unlock()
	fake.NewSizeStub = nil
	if fake.newSizeReturnsOnCall == nil {
		fake.newSizeReturnsOnCall = make(map[int]struct {
			result1 types.WAL
			result2 error
		})
	}
	fake.newSizeReturnsOnCall[i] = struct {
		result1 types.WAL
		result2 error
	}{result1, result2}
}

func (fake *FakeWALFactory) Open(arg1 log.Logger, arg2 prometheus.Registerer, arg3 string) (types.WAL, error) {
	fake.openMutex.Lock()
	ret, specificReturn := fake.openReturnsOnCall[len(fake.openArgsForCall)]
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		arg1 log.Logger
		arg2 prometheus.Registerer
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("Open", []interface{}{arg1, arg2, arg3})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.openReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWALFactory) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeWALFactory) OpenCalls(stub func(log.Logger, prometheus.Registerer, string) (types.WAL, error)) {
	fake.openMutex.Lock()
	defer fake.openMutex.Unlock()
	fake.OpenStub = stub
}

func (fake *FakeWALFactory) OpenArgsForCall(i int) (log.Logger, prometheus.Registerer, string) {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	argsForCall := fake.openArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeWALFactory) OpenReturns(result1 types.WAL, result2 error) {
	fake.openMutex.Lock()
	defer fake.openMutex.Unlock()
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 types.WAL
		result2 error
	}{result1, result2}
}

func (fake *FakeWALFactory) OpenReturnsOnCall(i int, result1 types.WAL, result2 error) {
	fake.openMutex.Lock()
	defer fake.openMutex.Unlock()
	fake.OpenStub = nil
	if fake.openReturnsOnCall == nil {
		fake.openReturnsOnCall = make(map[int]struct {
			result1 types.WAL
			result2 error
		})
	}
	fake.openReturnsOnCall[i] = struct {
		result1 types.WAL
		result2 error
	}{result1, result2}
}

func (fake *FakeWALFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	fake.newLiveReaderMutex.RLock()
	defer fake.newLiveReaderMutex.RUnlock()
	fake.newSegmentsRangeReaderMutex.RLock()
	defer fake.newSegmentsRangeReaderMutex.RUnlock()
	fake.newSizeMutex.RLock()
	defer fake.newSizeMutex.RUnlock()
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWALFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.WALFactory = new(FakeWALFactory)
