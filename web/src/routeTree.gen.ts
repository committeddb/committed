/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TypesImport } from './routes/types'
import { Route as SyncablesImport } from './routes/syncables'
import { Route as IngestablesImport } from './routes/ingestables'
import { Route as DatabasesImport } from './routes/databases'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const TypesTypeIdLazyImport = createFileRoute('/types/$typeId')()
const SyncablesSyncableIdLazyImport = createFileRoute(
  '/syncables/$syncableId',
)()
const IngestablesIngestableIdLazyImport = createFileRoute(
  '/ingestables/$ingestableId',
)()
const DatabasesDatabaseIdLazyImport = createFileRoute(
  '/databases/$databaseId',
)()

// Create/Update Routes

const TypesRoute = TypesImport.update({
  id: '/types',
  path: '/types',
  getParentRoute: () => rootRoute,
} as any)

const SyncablesRoute = SyncablesImport.update({
  id: '/syncables',
  path: '/syncables',
  getParentRoute: () => rootRoute,
} as any)

const IngestablesRoute = IngestablesImport.update({
  id: '/ingestables',
  path: '/ingestables',
  getParentRoute: () => rootRoute,
} as any)

const DatabasesRoute = DatabasesImport.update({
  id: '/databases',
  path: '/databases',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const TypesTypeIdLazyRoute = TypesTypeIdLazyImport.update({
  id: '/$typeId',
  path: '/$typeId',
  getParentRoute: () => TypesRoute,
} as any).lazy(() => import('./routes/types.$typeId.lazy').then((d) => d.Route))

const SyncablesSyncableIdLazyRoute = SyncablesSyncableIdLazyImport.update({
  id: '/$syncableId',
  path: '/$syncableId',
  getParentRoute: () => SyncablesRoute,
} as any).lazy(() =>
  import('./routes/syncables.$syncableId.lazy').then((d) => d.Route),
)

const IngestablesIngestableIdLazyRoute =
  IngestablesIngestableIdLazyImport.update({
    id: '/$ingestableId',
    path: '/$ingestableId',
    getParentRoute: () => IngestablesRoute,
  } as any).lazy(() =>
    import('./routes/ingestables.$ingestableId.lazy').then((d) => d.Route),
  )

const DatabasesDatabaseIdLazyRoute = DatabasesDatabaseIdLazyImport.update({
  id: '/$databaseId',
  path: '/$databaseId',
  getParentRoute: () => DatabasesRoute,
} as any).lazy(() =>
  import('./routes/databases.$databaseId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/databases': {
      id: '/databases'
      path: '/databases'
      fullPath: '/databases'
      preLoaderRoute: typeof DatabasesImport
      parentRoute: typeof rootRoute
    }
    '/ingestables': {
      id: '/ingestables'
      path: '/ingestables'
      fullPath: '/ingestables'
      preLoaderRoute: typeof IngestablesImport
      parentRoute: typeof rootRoute
    }
    '/syncables': {
      id: '/syncables'
      path: '/syncables'
      fullPath: '/syncables'
      preLoaderRoute: typeof SyncablesImport
      parentRoute: typeof rootRoute
    }
    '/types': {
      id: '/types'
      path: '/types'
      fullPath: '/types'
      preLoaderRoute: typeof TypesImport
      parentRoute: typeof rootRoute
    }
    '/databases/$databaseId': {
      id: '/databases/$databaseId'
      path: '/$databaseId'
      fullPath: '/databases/$databaseId'
      preLoaderRoute: typeof DatabasesDatabaseIdLazyImport
      parentRoute: typeof DatabasesImport
    }
    '/ingestables/$ingestableId': {
      id: '/ingestables/$ingestableId'
      path: '/$ingestableId'
      fullPath: '/ingestables/$ingestableId'
      preLoaderRoute: typeof IngestablesIngestableIdLazyImport
      parentRoute: typeof IngestablesImport
    }
    '/syncables/$syncableId': {
      id: '/syncables/$syncableId'
      path: '/$syncableId'
      fullPath: '/syncables/$syncableId'
      preLoaderRoute: typeof SyncablesSyncableIdLazyImport
      parentRoute: typeof SyncablesImport
    }
    '/types/$typeId': {
      id: '/types/$typeId'
      path: '/$typeId'
      fullPath: '/types/$typeId'
      preLoaderRoute: typeof TypesTypeIdLazyImport
      parentRoute: typeof TypesImport
    }
  }
}

// Create and export the route tree

interface DatabasesRouteChildren {
  DatabasesDatabaseIdLazyRoute: typeof DatabasesDatabaseIdLazyRoute
}

const DatabasesRouteChildren: DatabasesRouteChildren = {
  DatabasesDatabaseIdLazyRoute: DatabasesDatabaseIdLazyRoute,
}

const DatabasesRouteWithChildren = DatabasesRoute._addFileChildren(
  DatabasesRouteChildren,
)

interface IngestablesRouteChildren {
  IngestablesIngestableIdLazyRoute: typeof IngestablesIngestableIdLazyRoute
}

const IngestablesRouteChildren: IngestablesRouteChildren = {
  IngestablesIngestableIdLazyRoute: IngestablesIngestableIdLazyRoute,
}

const IngestablesRouteWithChildren = IngestablesRoute._addFileChildren(
  IngestablesRouteChildren,
)

interface SyncablesRouteChildren {
  SyncablesSyncableIdLazyRoute: typeof SyncablesSyncableIdLazyRoute
}

const SyncablesRouteChildren: SyncablesRouteChildren = {
  SyncablesSyncableIdLazyRoute: SyncablesSyncableIdLazyRoute,
}

const SyncablesRouteWithChildren = SyncablesRoute._addFileChildren(
  SyncablesRouteChildren,
)

interface TypesRouteChildren {
  TypesTypeIdLazyRoute: typeof TypesTypeIdLazyRoute
}

const TypesRouteChildren: TypesRouteChildren = {
  TypesTypeIdLazyRoute: TypesTypeIdLazyRoute,
}

const TypesRouteWithChildren = TypesRoute._addFileChildren(TypesRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/databases': typeof DatabasesRouteWithChildren
  '/ingestables': typeof IngestablesRouteWithChildren
  '/syncables': typeof SyncablesRouteWithChildren
  '/types': typeof TypesRouteWithChildren
  '/databases/$databaseId': typeof DatabasesDatabaseIdLazyRoute
  '/ingestables/$ingestableId': typeof IngestablesIngestableIdLazyRoute
  '/syncables/$syncableId': typeof SyncablesSyncableIdLazyRoute
  '/types/$typeId': typeof TypesTypeIdLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/databases': typeof DatabasesRouteWithChildren
  '/ingestables': typeof IngestablesRouteWithChildren
  '/syncables': typeof SyncablesRouteWithChildren
  '/types': typeof TypesRouteWithChildren
  '/databases/$databaseId': typeof DatabasesDatabaseIdLazyRoute
  '/ingestables/$ingestableId': typeof IngestablesIngestableIdLazyRoute
  '/syncables/$syncableId': typeof SyncablesSyncableIdLazyRoute
  '/types/$typeId': typeof TypesTypeIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/databases': typeof DatabasesRouteWithChildren
  '/ingestables': typeof IngestablesRouteWithChildren
  '/syncables': typeof SyncablesRouteWithChildren
  '/types': typeof TypesRouteWithChildren
  '/databases/$databaseId': typeof DatabasesDatabaseIdLazyRoute
  '/ingestables/$ingestableId': typeof IngestablesIngestableIdLazyRoute
  '/syncables/$syncableId': typeof SyncablesSyncableIdLazyRoute
  '/types/$typeId': typeof TypesTypeIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/databases'
    | '/ingestables'
    | '/syncables'
    | '/types'
    | '/databases/$databaseId'
    | '/ingestables/$ingestableId'
    | '/syncables/$syncableId'
    | '/types/$typeId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/databases'
    | '/ingestables'
    | '/syncables'
    | '/types'
    | '/databases/$databaseId'
    | '/ingestables/$ingestableId'
    | '/syncables/$syncableId'
    | '/types/$typeId'
  id:
    | '__root__'
    | '/'
    | '/databases'
    | '/ingestables'
    | '/syncables'
    | '/types'
    | '/databases/$databaseId'
    | '/ingestables/$ingestableId'
    | '/syncables/$syncableId'
    | '/types/$typeId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DatabasesRoute: typeof DatabasesRouteWithChildren
  IngestablesRoute: typeof IngestablesRouteWithChildren
  SyncablesRoute: typeof SyncablesRouteWithChildren
  TypesRoute: typeof TypesRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DatabasesRoute: DatabasesRouteWithChildren,
  IngestablesRoute: IngestablesRouteWithChildren,
  SyncablesRoute: SyncablesRouteWithChildren,
  TypesRoute: TypesRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/databases",
        "/ingestables",
        "/syncables",
        "/types"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/databases": {
      "filePath": "databases.tsx",
      "children": [
        "/databases/$databaseId"
      ]
    },
    "/ingestables": {
      "filePath": "ingestables.tsx",
      "children": [
        "/ingestables/$ingestableId"
      ]
    },
    "/syncables": {
      "filePath": "syncables.tsx",
      "children": [
        "/syncables/$syncableId"
      ]
    },
    "/types": {
      "filePath": "types.tsx",
      "children": [
        "/types/$typeId"
      ]
    },
    "/databases/$databaseId": {
      "filePath": "databases.$databaseId.lazy.tsx",
      "parent": "/databases"
    },
    "/ingestables/$ingestableId": {
      "filePath": "ingestables.$ingestableId.lazy.tsx",
      "parent": "/ingestables"
    },
    "/syncables/$syncableId": {
      "filePath": "syncables.$syncableId.lazy.tsx",
      "parent": "/syncables"
    },
    "/types/$typeId": {
      "filePath": "types.$typeId.lazy.tsx",
      "parent": "/types"
    }
  }
}
ROUTE_MANIFEST_END */
